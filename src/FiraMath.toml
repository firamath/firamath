# Data of OpenType MATH table for Fira Math
# =========================================
#
# DSL
# ---
#
# We use the following DSL to simplify the file:
#
# - `"XXXX.size#N"`  -> `"XXXX.size01"`, `"XXXX.size02"`, ..., `"XXXX.sizeN"`
# - `"XXXX?.size#N"` -> `"XXXX"`, `"XXXX.size01"`, `"XXXX.size02"`, ..., `"XXXX.sizeN"`
#
# Notes:
#
# - `size` can be other things such as `ssty` (but currently they are not used)
# - `N` should be a positve integer (1 <= N < 100)
# - The digit part will be zero-padded to length 2
#
# Examples:
#
# - `"radical.size#15"`  -> `"radical.size01"`, `"radical.size02"`, ..., `"radical.size15"`
# - `"integral?.size#1"` -> `"integral"`, `"integral.size01"`
# - `"?.size#15"`        -> `""`, `".size01"`, `".size02"`, ..., `".size15"`
#
# Design-dependent data
# ---------------------
#
# This file only contains design-independent data, such as global constants and glyph
# variants/components. The design-dependent data are stored in `FiraMath.glyphspackage` as
# `userData`. The following data are used:
#
# - `italicCorrection`
# - `topAccent`
# - `startConnector`
# - `endConnector`
#
# To visualize and edit them in Glyphs, please check <https://github.com/stone-zeng/MathTable>.
#
# Interpolation
# -------------
#
# Only data for master layers are stored here. For instances, they will be interpolated
# while building the fonts.
#
# Math device tables
# ------------------
#
# Some values in OpenType MATH table are described by `MathValueRecord` to include the device
# tables, so that corrections can be applied at different PPEM sizes. But we are not going to
# support the device tables, so all the values here are actually integers (more precisely `int16`
# or `uint16`).

[MathConstants]

# Global
ScriptPercentScaleDown                   = [   72,   72,   72,   72]
ScriptScriptPercentScaleDown             = [   58,   58,   58,   58]
DelimitedSubFormulaMinHeight             = [ 1500, 1500, 1500, 1500]
DisplayOperatorMinHeight                 = [ 1500, 1500, 1500, 1500]
MathLeading                              = [  150,  150,  150,  150]
AxisHeight                               = [  280,  280,  280,  280]
AccentBaseHeight                         = [  527,  527,  527,  527]
FlattenedAccentBaseHeight                = [  689,  689,  689,  689]

# Subscript and superscript
SubscriptShiftDown                       = [  350,  350,  350,  350]
SubscriptTopMax                          = [  527,  527,  527,  527]
SubscriptBaselineDropMin                 = [  250,  250,  250,  250]
SuperscriptShiftUp                       = [  400,  400,  400,  400]
SuperscriptShiftUpCramped                = [  270,  270,  270,  270]
SuperscriptBottomMin                     = [  130,  130,  130,  130]
SuperscriptBaselineDropMax               = [  360,  360,  360,  360]
SubSuperscriptGapMin                     = [  200,  200,  200,  200]
SuperscriptBottomMaxWithSubscript        = [  527,  527,  527,  527]
SpaceAfterScript                         = [   41,   41,   41,   41]

# Upper and lower limit
UpperLimitGapMin                         = [  150,  150,  150,  150]
UpperLimitBaselineRiseMin                = [  150,  150,  150,  150]
LowerLimitGapMin                         = [  150,  150,  150,  150]
LowerLimitBaselineDropMin                = [  600,  600,  600,  600]

# Stack
StackTopShiftUp                          = [  450,  450,  450,  450]
StackTopDisplayStyleShiftUp              = [  580,  580,  580,  580]
StackBottomShiftDown                     = [  480,  480,  480,  480]
StackBottomDisplayStyleShiftDown         = [  700,  700,  700,  700]
StackGapMin                              = [  200,  200,  200,  200]
StackDisplayStyleGapMin                  = [  500,  500,  500,  500]

# Stretch stack
StretchStackTopShiftUp                   = [  300,  300,  300,  300]
StretchStackBottomShiftDown              = [  600,  600,  600,  600]
StretchStackGapAboveMin                  = [  150,  150,  150,  150]
StretchStackGapBelowMin                  = [  150,  150,  150,  150]

# Fraction
FractionNumeratorShiftUp                 = [  450,  450,  450,  450]
FractionNumeratorDisplayStyleShiftUp     = [  580,  580,  580,  580]
FractionDenominatorShiftDown             = [  480,  480,  480,  480]
FractionDenominatorDisplayStyleShiftDown = [  700,  700,  700,  700]
FractionNumeratorGapMin                  = [   80,   80,   80,   80]
FractionNumDisplayStyleGapMin            = [  200,  200,  200,  200]
FractionRuleThickness                    = [    2,   30,   76,  160]
FractionDenominatorGapMin                = [   80,   80,   80,   80]
FractionDenomDisplayStyleGapMin          = [  200,  200,  200,  200]

# Skewed fraction
SkewedFractionHorizontalGap              = [    0,    0,    0,    0]
SkewedFractionVerticalGap                = [    0,    0,    0,    0]

# Overbar and underbar
OverbarVerticalGap                       = [  150,  150,  150,  150]
OverbarRuleThickness                     = [    2,   30,   76,  160]
OverbarExtraAscender                     = [   50,   50,   50,   50]
UnderbarVerticalGap                      = [  150,  150,  150,  150]
UnderbarRuleThickness                    = [    2,   30,   76,  160]
UnderbarExtraDescender                   = [   50,   50,   50,   50]

# Radical
RadicalVerticalGap                       = [   96,   96,   96,   96]
RadicalDisplayStyleVerticalGap           = [  142,  142,  142,  142]
RadicalRuleThickness                     = [    2,   30,   76,  160]
RadicalExtraAscender                     = [    2,   30,   76,  160]
RadicalKernBeforeDegree                  = [  276,  276,  276,  276]
RadicalKernAfterDegree                   = [ -400, -400, -400, -400]
RadicalDegreeBottomRaisePercent          = [   64,   64,   64,   64]

[MathGlyphInfo]

ItalicCorrection = {}
TopAccent = {}
ExtendedShapes = [
    # Big operators
    "integral?.size#1",
    "dblintegral?.size#1",
    "tripleintegral?.size#1",
    "quadrupleIntegralOperator?.size#1",
    "contourintegral?.size#1",
    "surfaceintegral?.size#1",
    "volumeintegral?.size#1",
    "clockwiseintegral?.size#1",
    "anticlockwiseIntegration?.size#1",
    "clockwisecontourintegral?.size#1",
    "anticlockwisecontourintegral?.size#1",
    "summationWithIntegral?.size#1",
    "finitePartIntegral?.size#1",
    "integralWithDoubleStroke?.size#1",
    "integralAverageWithSlash?.size#1",
    "circulationFunction?.size#1",
    "product?.size#1",
    "coproduct?.size#1",
    "summation?.size#1",
    "summationdoubleStruck?.size#1",
    "moduloTwoSum?.size#1",
    "narylogicaland?.size#1",
    "narylogicalor?.size#1",
    "twoLogicalAndOperator?.size#1",
    "twoLogicalOrOperator?.size#1",
    "naryintersection?.size#1",
    "naryunion?.size#1",
    "nAryUnionOperatorWithDot?.size#1",
    "nAryUnionOperatorWithPlus?.size#1",
    "nArySquareIntersectionOperator?.size#1",
    "nArySquareUnionOperator?.size#1",
    "nAryCircledDotOperator?.size#1",
    "nAryCircledPlusOperator?.size#1",
    "nAryCircledTimesOperator?.size#1",
    "nAryTimesOperator?.size#1",
    "largeUpTack?.size#1",
    "largeDownTack?.size#1",
    "bigSolidus?.size#1",
    "bigReverseSolidus?.size#1",
    # Delimiters
    "parenleft.size#15",
    "parenright.size#15",
    "leftflattenedparenthesis-math.size#15",
    "rightflattenedparenthesis-math.size#15",
    "bracketleft.size#15",
    "bracketright.size#15",
    "braceleft.size#15",
    "braceright.size#15",
    "leftCeiling.size#15",
    "rightCeiling.size#15",
    "leftFloor.size#15",
    "rightFloor.size#15",
    "leftanglebracket-math.size#15",
    "rightanglebracket-math.size#15",
    "leftdoubleanglebracket-math.size#15",
    "rightdoubleanglebracket-math.size#15",
    "lightlefttortoiseshellbracketornament.size#15",
    "lightrighttortoiseshellbracketornament.size#15",
    "upperleftorlowerrightcurlybracketsection.size#15",
    "upperrightorlowerleftcurlybracketsection.size#15",
    "leftwhitesquarebracket-math.size#15",
    "rightwhitesquarebracket-math.size#15",
    "bar.size#15",
    "dblverticalbar.size#15",
    "tripleVerticalBarDelimiter.size#15",
    "slash.size#15",
    "backslash.size#15",
    "fraction.size#15",
    "radical.size#15",
    "cuberoot.size#15",
    "fourthroot.size#15",
]

[MathVariants]

MinConnectorOverlap = [20, 20, 20, 20]

[MathVariants.HorizontalVariants]

"topparenthesis"               = "topparenthesis?.size#15"
"bottomparenthesis"            = "bottomparenthesis?.size#15"
"topsquarebracket"             = "topsquarebracket?.size#15"
"bottomsquarebracket"          = "bottomsquarebracket?.size#15"
"topcurlybracket"              = "topcurlybracket?.size#15"
"bottomcurlybracket"           = "bottomcurlybracket?.size#15"
"leftarrowabovecomb"           = "leftarrowabovecomb?.size#15"
"rightarrowabovecomb"          = "rightarrowabovecomb?.size#15"
"leftarrowbelowcomb"           = "leftarrowbelowcomb?.size#15"
"rightarrowbelowcomb"          = "rightarrowbelowcomb?.size#15"
"leftharpoonabovecomb"         = "leftharpoonabovecomb?.size#15"
"rightharpoonabovecomb"        = "rightharpoonabovecomb?.size#15"
"leftharpoonwithbarbdowncomb"  = "leftharpoonwithbarbdowncomb?.size#15"
"rightharpoonwithbarbdowncomb" = "rightharpoonwithbarbdowncomb?.size#15"
"leftrightarrowabovecomb"      = "leftrightarrowabovecomb?.size#15"
"arrowleftrightbelowcomb"      = "arrowleftrightbelowcomb?.size#15"

[MathVariants.VerticalVariants]

"integral"                                 = "integral?.size#1"
"dblintegral"                              = "dblintegral?.size#1"
"tripleintegral"                           = "tripleintegral?.size#1"
"quadrupleIntegralOperator"                = "quadrupleIntegralOperator?.size#1"
"contourintegral"                          = "contourintegral?.size#1"
"surfaceintegral"                          = "surfaceintegral?.size#1"
"volumeintegral"                           = "volumeintegral?.size#1"
"clockwiseintegral"                        = "clockwiseintegral?.size#1"
"anticlockwiseIntegration"                 = "anticlockwiseIntegration?.size#1"
"clockwisecontourintegral"                 = "clockwisecontourintegral?.size#1"
"anticlockwisecontourintegral"             = "anticlockwisecontourintegral?.size#1"
"summationWithIntegral"                    = "summationWithIntegral?.size#1"
"finitePartIntegral"                       = "finitePartIntegral?.size#1"
"integralWithDoubleStroke"                 = "integralWithDoubleStroke?.size#1"
"integralAverageWithSlash"                 = "integralAverageWithSlash?.size#1"
"circulationFunction"                      = "circulationFunction?.size#1"
"product"                                  = "product?.size#1"
"coproduct"                                = "coproduct?.size#1"
"summation"                                = "summation?.size#1"
"summationdoubleStruck"                    = "summationdoubleStruck?.size#1"
"moduloTwoSum"                             = "moduloTwoSum?.size#1"
"narylogicaland"                           = "narylogicaland?.size#1"
"narylogicalor"                            = "narylogicalor?.size#1"
"twoLogicalAndOperator"                    = "twoLogicalAndOperator?.size#1"
"twoLogicalOrOperator"                     = "twoLogicalOrOperator?.size#1"
"naryintersection"                         = "naryintersection?.size#1"
"naryunion"                                = "naryunion?.size#1"
"nAryUnionOperatorWithDot"                 = "nAryUnionOperatorWithDot?.size#1"
"nAryUnionOperatorWithPlus"                = "nAryUnionOperatorWithPlus?.size#1"
"nArySquareIntersectionOperator"           = "nArySquareIntersectionOperator?.size#1"
"nArySquareUnionOperator"                  = "nArySquareUnionOperator?.size#1"
"nAryCircledDotOperator"                   = "nAryCircledDotOperator?.size#1"
"nAryCircledPlusOperator"                  = "nAryCircledPlusOperator?.size#1"
"nAryCircledTimesOperator"                 = "nAryCircledTimesOperator?.size#1"
"nAryTimesOperator"                        = "nAryTimesOperator?.size#1"
"largeUpTack"                              = "largeUpTack?.size#1"
"largeDownTack"                            = "largeDownTack?.size#1"
"bigSolidus"                               = "bigSolidus?.size#1"
"bigReverseSolidus"                        = "bigReverseSolidus?.size#1"
"parenleft"                                = "parenleft?.size#15"
"parenright"                               = "parenright?.size#15"
"leftflattenedparenthesis-math"            = "leftflattenedparenthesis-math?.size#15"
"rightflattenedparenthesis-math"           = "rightflattenedparenthesis-math?.size#15"
"bracketleft"                              = "bracketleft?.size#15"
"bracketright"                             = "bracketright?.size#15"
"braceleft"                                = "braceleft?.size#15"
"braceright"                               = "braceright?.size#15"
"leftCeiling"                              = "leftCeiling?.size#15"
"rightCeiling"                             = "rightCeiling?.size#15"
"leftFloor"                                = "leftFloor?.size#15"
"rightFloor"                               = "rightFloor?.size#15"
"leftanglebracket-math"                    = "leftanglebracket-math?.size#15"
"rightanglebracket-math"                   = "rightanglebracket-math?.size#15"
"leftdoubleanglebracket-math"              = "leftdoubleanglebracket-math?.size#15"
"rightdoubleanglebracket-math"             = "rightdoubleanglebracket-math?.size#15"
"lightlefttortoiseshellbracketornament"    = "lightlefttortoiseshellbracketornament?.size#15"
"lightrighttortoiseshellbracketornament"   = "lightrighttortoiseshellbracketornament?.size#15"
"upperleftorlowerrightcurlybracketsection" = "upperleftorlowerrightcurlybracketsection?.size#15"
"upperrightorlowerleftcurlybracketsection" = "upperrightorlowerleftcurlybracketsection?.size#15"
"leftwhitesquarebracket-math"              = "leftwhitesquarebracket-math?.size#15"
"rightwhitesquarebracket-math"             = "rightwhitesquarebracket-math?.size#15"
"bar"                                      = "bar?.size#15"
"dblverticalbar"                           = "dblverticalbar?.size#15"
"tripleVerticalBarDelimiter"               = "tripleVerticalBarDelimiter?.size#15"
"slash"                                    = "slash?.size#15"
"backslash"                                = "backslash?.size#15"
"fraction"                                 = "fraction?.size#15"
"radical"                                  = "radical?.size#15"
"cuberoot"                                 = "cuberoot?.size#15"
"fourthroot"                               = "fourthroot?.size#15"

[MathVariants.HorizontalComponents]

"topparenthesis".italicsCorrection = 0
"topparenthesis".parts = [
    { name = "topparenthesis.left",  isExtender = false },
    { name = "topparenthesis.ext",   isExtender = true  },
    { name = "topparenthesis.right", isExtender = false },
]

"bottomparenthesis".italicsCorrection = 0
"bottomparenthesis".parts = [
    { name = "bottomparenthesis.left",  isExtender = false },
    { name = "bottomparenthesis.ext",   isExtender = true  },
    { name = "bottomparenthesis.right", isExtender = false },
]

"topsquarebracket".italicsCorrection = 0
"topsquarebracket".parts = [
    { name = "topsquarebracket.left",  isExtender = false },
    { name = "topsquarebracket.ext",   isExtender = true  },
    { name = "topsquarebracket.right", isExtender = false },
]

"bottomsquarebracket".italicsCorrection = 0
"bottomsquarebracket".parts = [
    { name = "bottomsquarebracket.left",  isExtender = false },
    { name = "bottomsquarebracket.ext",   isExtender = true  },
    { name = "bottomsquarebracket.right", isExtender = false },
]

"topcurlybracket".italicsCorrection = 0
"topcurlybracket".parts = [
    { name = "topcurlybracket.left",  isExtender = false },
    { name = "topcurlybracket.ext",   isExtender = true  },
    { name = "topcurlybracket.mid",   isExtender = false },
    { name = "topcurlybracket.ext",   isExtender = true  },
    { name = "topcurlybracket.right", isExtender = false },
]

"bottomcurlybracket".italicsCorrection = 0
"bottomcurlybracket".parts = [
    { name = "bottomcurlybracket.left",  isExtender = false },
    { name = "bottomcurlybracket.ext",   isExtender = true  },
    { name = "bottomcurlybracket.mid",   isExtender = false },
    { name = "bottomcurlybracket.ext",   isExtender = true  },
    { name = "bottomcurlybracket.right", isExtender = false },
]

[MathVariants.VerticalComponents]

"parenleft".italicsCorrection = 0
"parenleft".parts = [
    { name = "parenleftlowerhook", isExtender = false },
    { name = "parenleftextension", isExtender = true  },
    { name = "parenleftupperhook", isExtender = false },
]

"parenright".italicsCorrection = 0
"parenright".parts = [
    { name = "parenrightlowerhook", isExtender = false },
    { name = "parenrightextension", isExtender = true  },
    { name = "parenrightupperhook", isExtender = false },
]

"leftflattenedparenthesis-math".italicsCorrection = 0
"leftflattenedparenthesis-math".parts = [
    { name = "leftflattenedparenthesis-math.bot", isExtender = false },
    { name = "leftflattenedparenthesis-math.ext", isExtender = true  },
    { name = "leftflattenedparenthesis-math.top", isExtender = false },
]

"rightflattenedparenthesis-math".italicsCorrection = 0
"rightflattenedparenthesis-math".parts = [
    { name = "rightflattenedparenthesis-math.bot", isExtender = false },
    { name = "rightflattenedparenthesis-math.ext", isExtender = true  },
    { name = "rightflattenedparenthesis-math.top", isExtender = false },
]

"bracketleft".italicsCorrection = 0
"bracketleft".parts = [
    { name = "leftsquarebracketlowercorner", isExtender = false },
    { name = "leftsquarebracketextension",   isExtender = true  },
    { name = "leftsquarebracketuppercorner", isExtender = false },
]

"bracketright".italicsCorrection = 0
"bracketright".parts = [
    { name = "rightsquarebracketlowercorner", isExtender = false },
    { name = "rightsquarebracketextension",   isExtender = true  },
    { name = "rightsquarebracketuppercorner", isExtender = false },
]

"braceleft".italicsCorrection = 0
"braceleft".parts = [
    { name = "leftcurlybracketlowerhook",   isExtender = false },
    { name = "braceleft.ext",               isExtender = true  },
    { name = "leftcurlybracketmiddlepiece", isExtender = false },
    { name = "braceleft.ext",               isExtender = true  },
    { name = "leftcurlybracketupperhook",   isExtender = false },
]

"braceright".italicsCorrection = 0
"braceright".parts = [
    { name = "rightcurlybracketlowerhook",   isExtender = false },
    { name = "braceright.ext",               isExtender = true  },
    { name = "rightcurlybracketmiddlepiece", isExtender = false },
    { name = "braceright.ext",               isExtender = true  },
    { name = "rightcurlybracketupperhook",   isExtender = false },
]

"leftCeiling".italicsCorrection = 0
"leftCeiling".parts = [
    { name = "leftCeiling.ext", isExtender = true  },
    { name = "leftCeiling.top", isExtender = false },
]

"rightCeiling".italicsCorrection = 0
"rightCeiling".parts = [
    { name = "rightCeiling.ext", isExtender = true  },
    { name = "rightCeiling.top", isExtender = false },
]

"leftFloor".italicsCorrection = 0
"leftFloor".parts = [
    { name = "leftFloor.bot", isExtender = false },
    { name = "leftFloor.ext", isExtender = true  },
]

"rightFloor".italicsCorrection = 0
"rightFloor".parts = [
    { name = "rightFloor.bot", isExtender = false },
    { name = "rightFloor.ext", isExtender = true  },
]

"lightlefttortoiseshellbracketornament".italicsCorrection = 0
"lightlefttortoiseshellbracketornament".parts = [
    { name = "lightlefttortoiseshellbracketornament.bot", isExtender = false },
    { name = "lightlefttortoiseshellbracketornament.ext", isExtender = true  },
    { name = "lightlefttortoiseshellbracketornament.top", isExtender = false },
]

"lightrighttortoiseshellbracketornament".italicsCorrection = 0
"lightrighttortoiseshellbracketornament".parts = [
    { name = "lightrighttortoiseshellbracketornament.bot", isExtender = false },
    { name = "lightrighttortoiseshellbracketornament.ext", isExtender = true  },
    { name = "lightrighttortoiseshellbracketornament.top", isExtender = false },
]

"upperleftorlowerrightcurlybracketsection".italicsCorrection = 0
"upperleftorlowerrightcurlybracketsection".parts = [
    { name = "upperleftorlowerrightcurlybracketsection.bot", isExtender = false },
    { name = "upperleftorlowerrightcurlybracketsection.ext", isExtender = true  },
    { name = "upperleftorlowerrightcurlybracketsection.top", isExtender = false },
]

"upperrightorlowerleftcurlybracketsection".italicsCorrection = 0
"upperrightorlowerleftcurlybracketsection".parts = [
    { name = "upperrightorlowerleftcurlybracketsection.bot", isExtender = false },
    { name = "upperrightorlowerleftcurlybracketsection.ext", isExtender = true  },
    { name = "upperrightorlowerleftcurlybracketsection.top", isExtender = false },
]

"leftwhitesquarebracket-math".italicsCorrection = 0
"leftwhitesquarebracket-math".parts = [
    { name = "leftwhitesquarebracket-math.bot", isExtender = false },
    { name = "leftwhitesquarebracket-math.ext", isExtender = true  },
    { name = "leftwhitesquarebracket-math.top", isExtender = false },
]

"rightwhitesquarebracket-math".italicsCorrection = 0
"rightwhitesquarebracket-math".parts = [
    { name = "rightwhitesquarebracket-math.bot", isExtender = false },
    { name = "rightwhitesquarebracket-math.ext", isExtender = true  },
    { name = "rightwhitesquarebracket-math.top", isExtender = false },
]

"bar".italicsCorrection = 0
"bar".parts = [
    { name = "leftverticalboxline", isExtender = false },
    { name = "leftverticalboxline", isExtender = true  },
]

"dblverticalbar".italicsCorrection = 0
"dblverticalbar".parts = [
    { name = "dblverticalbar.ext", isExtender = false },
    { name = "dblverticalbar.ext", isExtender = true  },
]

"tripleVerticalBarDelimiter".italicsCorrection = 0
"tripleVerticalBarDelimiter".parts = [
    { name = "tripleVerticalBarDelimiter.ext", isExtender = false },
    { name = "tripleVerticalBarDelimiter.ext", isExtender = true  },
]

"radical".italicsCorrection = 0
"radical".parts = [
    { name = "radicalsymbolbottom", isExtender = false },
    { name = "radical.ext",         isExtender = true  },
    { name = "radical.top",         isExtender = false },
]

"cuberoot".italicsCorrection = 0
"cuberoot".parts = [
    { name = "cuberoot.bot", isExtender = false },
    { name = "radical.ext",  isExtender = true  },
    { name = "radical.top",  isExtender = false },
]

"fourthroot".italicsCorrection = 0
"fourthroot".parts = [
    { name = "fourthroot.bot", isExtender = false },
    { name = "radical.ext",    isExtender = true  },
    { name = "radical.top",    isExtender = false },
]
